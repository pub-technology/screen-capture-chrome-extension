{"version":3,"file":"contentScripts.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA","sources":["webpack://screen-capture/./src/handlers/index.js","webpack://screen-capture/./src/handlers/onUserTypingHandler.js","webpack://screen-capture/./src/match.js","webpack://screen-capture/webpack/bootstrap","webpack://screen-capture/./src/contentScripts.js"],"sourcesContent":["const UserTypingMonitoring = require('./onUserTypingHandler');\n\nwindow.onload = () => {\n  new UserTypingMonitoring();\n};\n","const { match: matchFunc } = require('../match');\n\n// Find first ancestor of el with tagName\n// or undefined if not found\nfunction upTo(el, tagName) {\n  tagName = tagName.toLowerCase();\n  let maxUpto = 2;\n  while (el && el.parentNode) {\n    if (maxUpto === 0) {\n      return null;\n    }\n    el = el.parentNode;\n    if (el.tagName && el.tagName.toLowerCase() === tagName) {\n      return el;\n    }\n    maxUpto--;\n  }\n\n  // Many DOM methods return null if they don't\n  // find the element they are searching for\n  // It would be OK to omit the following and just\n  // return undefined\n  return null;\n}\n\nclass UserTypingMonitoring {\n  constructor() {\n    this.init();\n    this.currentText = '';\n  }\n\n  extractDOMAndGetText(event) {\n    let value = '';\n    const tagName = event.target.tagName.toLowerCase();\n    if (['input', 'textarea'].includes(tagName)) {\n      value = event.target.value;\n    } else if (['div', 'a'].includes(tagName)) {\n      value = event.target.innerText || event.target.value;\n    }\n    if (tagName === 'a') {\n      if (matchFunc(value)) {\n        chrome.runtime.sendMessage({ type: 'notify', text: value });\n        this.currentText = '';\n      }\n      return;\n    }\n    if (event.key === \"Enter\" && this.currentText && this.currentText !== '') {\n      if (matchFunc(value)) {\n        chrome.runtime.sendMessage({ type: 'notify', text: value });\n      }\n    } else {\n      this.currentText = value;\n    }\n  }\n\n  onChangeEventHandler(event) {\n    if (event.target && event.target.tagName) {\n      this.extractDOMAndGetText(event);\n    }\n  }\n\n  keyupEventHandler(event) {\n    if (event.target && event.target.tagName) {\n      this.extractDOMAndGetText(event);\n    }\n  }\n\n  onMouseHoverEventHandler(event) {\n    if (event.target && event.target.tagName) {\n      const linkElement = upTo(event.target, 'a');\n      if (linkElement) {\n        this.extractDOMAndGetText(linkElement);\n      }\n    }\n  }\n\n  onChangeHandler(event) {\n    if (!event) {\n      return;\n    }\n    switch (event.type) {\n      case 'change':\n        this.onChangeEventHandler(event);\n        break;\n      case 'keyup':\n        this.keyupEventHandler(event);\n        break;\n      case 'mouseover':\n        this.onMouseHoverEventHandler(event);\n        break;\n    }\n  };\n\n  init() {\n    document.addEventListener('change', this.onChangeHandler.bind(this));\n    document.addEventListener('keyup', this.onChangeHandler.bind(this));\n  }\n}\n\nmodule.exports = UserTypingMonitoring;\n","const violenceTexts = [\n  'sex',\n  'porn',\n  'fuck',\n]\n\nconst match = (text = '') => {\n  return violenceTexts.some((item) => {\n    return text.toLowerCase().includes(item);\n  })\n}\n\nmodule.exports = {\n  match\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","require('./handlers');\n"],"names":[],"sourceRoot":""}